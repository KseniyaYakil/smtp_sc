/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (smtp-fsm.h)
 *  
 *  It has been AutoGen-ed  Thursday January 14, 2016 at 11:24:54 AM MSK
 *  From the definitions    smtp.tpl
 *  and the template file   fsm
 *
 *  Automated Finite State Machine
 *
 *  copyright (c) 2001-2007 by Bruce Korb - all rights reserved
 *
 *  AutoFSM is free software copyrighted by Bruce Korb.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. Neither the name ``Bruce Korb'' nor the name of any other
 *     contributor may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *  
 *  AutoFSM IS PROVIDED BY Bruce Korb ``AS IS'' AND ANY EXPRESS
 *  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED.  IN NO EVENT SHALL Bruce Korb OR ANY OTHER CONTRIBUTORS
 *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 *  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  This file enumerates the states and transition events for a FSM.
 *
 *  te_smtp_state
 *      The available states.  FSS_INIT is always defined to be zero
 *      and FSS_INVALID and FSS_DONE are always made the last entries.
 *
 *  te_smtp_event
 *      The transition events.  These enumerate the event values used
 *      to select the next state from the current state.
 *      SMTP_EV_INVALID is always defined at the end.
 */
#ifndef AUTOFSM_SMTP_FSM_H_GUARD
#define AUTOFSM_SMTP_FSM_H_GUARD 1

/*
 *  Finite State machine States
 *
 *  Count of non-terminal states.  The generated states INVALID and DONE
 *  are terminal, but INIT is not  :-).
 */
#define SMTP_STATE_CT  13
typedef enum {
    SMTP_ST_INIT,           SMTP_ST_PARSE_CMD,      SMTP_ST_PROCESS_QUIT,
    SMTP_ST_PROCESS_VERIFY, SMTP_ST_PROCESS_RSET,   SMTP_ST_SEQ_ERR,
    SMTP_ST_ST_ERR,         SMTP_ST_TRANS_BEGIN,    SMTP_ST_RCPT_BEGIN,
    SMTP_ST_RCPT_MIDDLE,    SMTP_ST_DATA_WAIT,      SMTP_ST_PARSE_DATA,
    SMTP_ST_STORE_MAIL,     SMTP_ST_INVALID,        SMTP_ST_DONE
} te_smtp_state;

/*
 *  Finite State machine transition Events.
 *
 *  Count of the valid transition events
 */
#define SMTP_EVENT_CT 12
typedef enum {
    SMTP_EV_HELO,     SMTP_EV_EHLO,     SMTP_EV_VRFY,     SMTP_EV_RSET,
    SMTP_EV_QUIT,     SMTP_EV_MAIL,     SMTP_EV_RCPT,     SMTP_EV_DATA,
    SMTP_EV_DATA_RCV, SMTP_EV_DATA_END, SMTP_EV_OK,       SMTP_EV_ERR,
    SMTP_EV_INVALID
} te_smtp_event;

/*
 *  Step the FSM.  Returns the resulting state.  If the current state is
 *  SMTP_ST_DONE or SMTP_ST_INVALID, it resets to
 *  SMTP_ST_INIT and returns SMTP_ST_INIT.
 */
extern te_smtp_state
smtp_step(
    te_smtp_state smtp_state,
    te_smtp_event trans_evt,
    void *data );

#endif /* AUTOFSM_SMTP_FSM_H_GUARD */
/*
 * Local Variables:
 * mode: C
 * c-file-style: "stroustrup"
 * indent-tabs-mode: nil
 * End:
 * end of smtp-fsm.h */
